import sys
import os
import string
import subprocess
import getopt
import pickle
import re
import linecache
##############################################################
##############################################################
##############################################################
### This script takes input variables, added in array_of_vars
### and trains an MVA with combinations of two vars at a time
### then pipes the output to a final output csv file that
### allows you to sort each combo based on ROC-Integ and
### separation. This seems to work better than picking the
### top variables based on rank that TMVA outputs.
##############################################################
####### Charlie Mueller (cmuelle2@nd.edu) 6/4/2013 ###########
##############################################################

temp_dir = "output_files1/"
output_csv ="var_list.csv"

array_of_vars = ["dEtaJJ_mJJMax", "avg_dr_jets", "dEtaJJ_dEtaJJMax"]#, "dEtaJJ_dRJJMax", "dRJJ_dEtaJJMax", "higgsLike_dijet_mass2", "dRJJ_dRJJMax", "dRJJ_ptJJMax", "mJJ_ptJJMax", "mJJ_dEtaJJMax", "etaJJ_sumPtJJMax", "dEtaJJ_ptSumOtherMin", "dEtaJJ_ptLeadOtherMin", "dRJJ_mJJMax", "dEtaJJ_dPhiJJMin", "dRJJ_ptOtherMax", "dEtaJJ_dPhiJJMax", "mJJ_ptOtherMax", "dEtaJJ_dEtaJJMin", "dEtaJJ_pJJMin", "dEtaJJ_ptLeadOtherMax", "dEtaJJ_pOtherMin", "dEtaJJ_ptOtherMax", "dEtaJJ_ptJJMax", "dEtaJJ_ptAsymJJMin", "dEtaJJ_ptAsymJJMax", "dEtaJJ_ptJJMin", "etaJJ_etaOtherMin", "mJJ_dRJJMax", "dEtaJJ_ptOtherMin", "dEtaJJ_mOtherMin", "dRJJ_ptAsymJJMax", "dRJJ_dPhiJJMin", "dRJJ_pJJMin", "numHiggsLike_dijet_15_float", "etaJJ_pzJJMax", "etaJJ_pzOtherMin", "mJJ_mJJMax", "dRJJ_sumPtJJMax", "dRJJ_ptSumOtherMin", "dRJJ_ptLeadOtherMin", "ptSumOther_etaOtherMin", "min_dr_tagged_jets", "pOther_pOtherMin", "higgsLike_dijet_mass", "dEtaJJ_pJJMax", "pzOther_pOtherMax", "mJJ_ptLeadOtherMax", "etaJJ_etaJJMax", "dRJJ_ptJJMin"]
n = len(array_of_vars)

cmd1 = "mkdir "+temp_dir
cmd2 = "rm -rf "+temp_dir
subprocess.call(cmd1, shell=True)


output = open(output_csv,'wb')
output.write(" ROC-integ, Separation, Significance, Variables\n")

for i in range(0,n):
    for j in range(i,n):
        if i != j:
            #make sure lines 286 and 287 have factory1->AddVariable("variable_here",'F');
            #if they don't go to the appropriate lines in the TMVAClassifier_A.C and 
            edit1 = "sed -i '286 s/\".*\"/\""+array_of_vars[i]+"\"/' TMVAClassification_A.C"
            edit2 = "sed -i '287 s/\".*\"/\""+array_of_vars[j]+"\"/' TMVAClassification_A.C"
            runit = "root -l -q TMVAClassification_A.C+\'(\"CFMlpANN\",\"ge4jeq2t_KEVIN_fewVAR\",\"ttbar_bb\",\"numJets>=4\",\"numTaggedJets==2\",true,\"OS\",-2)\' > "+temp_dir+array_of_vars[i]+"++"+array_of_vars[j]+".txt"
	                
            subprocess.call(edit1, shell=True)
            subprocess.call(edit2, shell=True)
            subprocess.call(runit, shell=True)
            
            input = temp_dir+array_of_vars[i]+"++"+array_of_vars[j]+".txt"
	    str1 = linecache.getline(input,235)
            str = str1[82:-1]
            str= str.replace("    | ",",")
            str = str.replace("    ",",")
            str = str+", "+ array_of_vars[i]+", "+array_of_vars[j]
            output.write(str+"\n")



            
subprocess.call(cmd2, shell=True)
